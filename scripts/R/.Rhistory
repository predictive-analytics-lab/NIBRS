case_when(a <= 1 ~ 1, a<= 2 ~ 2)
assign_quartile <- function(x, quartiles){
case_when(
x > quartiles[3] ~ 4,
x > quartiles[2] ~ 3,
x > quartiles[1] ~ 2,
x <= quartiles[1] ~ 1
)
}
quartiles <- sr %>% summarise(quant = quantile(selection_ratio/ci,
probs = c(0.25, 0.5, 0.75))) %>%
pull(quant)
assign_quartile <- function(x, quartiles){
x <- case_when(
x > quartiles[3] ~ 4,
x > quartiles[2] ~ 3,
x > quartiles[1] ~ 2,
x <= quartiles[1] ~ 1
)
x / 4
}
quartiles <- sr %>% summarise(quant = quantile(selection_ratio/ci,
probs = c(0.25, 0.5, 0.75))) %>%
pull(quant)
sr_x_county %>%
mutate(quartile = assign_quartile(selection_ratio/ci, quartiles))
sr_x_county %>%
mutate(quartile = assign_quartile(sr/ci, quartiles)) %>%
mutate(sr_binned = case_when(
sr < 0.8 ~ 'S<0.8',
sr >= 0.8 & sr < 1.25 ~ '0.8\u2264 S < 1.25',
sr >= 1.25 & sr < 2 ~ '1.25\u2264 S < 2',
sr >= 2 & sr < 5 ~'2\u2264 S < 5',
sr > 5 ~ 'S \u2265 5'
)) %>%
ggplot(data = .,
mapping = aes(x = long, y = lat,
group = group,
fill = factor(sr_binned, levels = fct_order),
alpha = sr/ci)) +
geom_polygon(color = "white", size = 0.2) +
# add state lines?
scale_fill_manual('Selection ratio S', values = cols, na.value = 'gray90') +
# scale_fill_gradientn(colours = terrain.colors(5),
#                      na.value="gray90",
#                      guide = guide_colourbar(title = ' Log\n selection\n ratio',
#                                              label.hjust = 1,
#                                              barwidth = 1.2, barheight = 10,
#                                              label.position = "left"))  +
theme_classic() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_alpha(guide = 'none')
sr_x_county %>%
mutate(quartile = assign_quartile(sr/ci, quartiles)) %>%
mutate(sr_binned = case_when(
sr < 0.8 ~ 'S<0.8',
sr >= 0.8 & sr < 1.25 ~ '0.8\u2264 S < 1.25',
sr >= 1.25 & sr < 2 ~ '1.25\u2264 S < 2',
sr >= 2 & sr < 5 ~'2\u2264 S < 5',
sr > 5 ~ 'S \u2265 5'
)) %>%
ggplot(data = .,
mapping = aes(x = long, y = lat,
group = group,
fill = factor(sr_binned, levels = fct_order),
alpha = quartile)) +
geom_polygon(color = "white", size = 0.2) +
# add state lines?
scale_fill_manual('Selection ratio S', values = cols, na.value = 'gray90') +
# scale_fill_gradientn(colours = terrain.colors(5),
#                      na.value="gray90",
#                      guide = guide_colourbar(title = ' Log\n selection\n ratio',
#                                              label.hjust = 1,
#                                              barwidth = 1.2, barheight = 10,
#                                              label.position = "left"))  +
theme_classic() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_alpha(guide = 'none')
x <- sr_x_county %>%
mutate(quartile = assign_quartile(sr/ci, quartiles))
table(x$quartile)
sr_x_county %>%
mutate(quartile = assign_quartile(sr/ci, quartiles)) %>%
mutate(sr_binned = case_when(
sr < 0.8 ~ 'S<0.8',
sr >= 0.8 & sr < 1.25 ~ '0.8\u2264 S < 1.25',
sr >= 1.25 & sr < 2 ~ '1.25\u2264 S < 2',
sr >= 2 & sr < 5 ~'2\u2264 S < 5',
sr > 5 ~ 'S \u2265 5'
)) %>%
ggplot(data = .,
mapping = aes(x = long, y = lat,
group = group,
fill = factor(sr_binned, levels = fct_order),
alpha = quartile)) +
geom_polygon(color = "white", size = 0.2) +
# add state lines?
scale_fill_manual('Selection ratio S', values = cols, na.value = 'gray90') +
# scale_fill_gradientn(colours = terrain.colors(5),
#                      na.value="gray90",
#                      guide = guide_colourbar(title = ' Log\n selection\n ratio',
#                                              label.hjust = 1,
#                                              barwidth = 1.2, barheight = 10,
#                                              label.position = "left"))  +
theme_classic() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_alpha(guide = 'none')
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=3, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
library(cowplot)
install.packages('cowplot')
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=3, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
library(reshape2)
install.packages('reshape2')
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=3, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
library(reshape2)
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=3, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 5, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "More Var 2 -->",x=0.91,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "More Var 2 -->",x=0.91,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "More Var 2 -->",x=0.91,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "More Var 2 -->",x=0.91,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
install.packages('cowplot')
library(cowplot)
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "More Var 2 -->",x=0.91,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.91,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.91,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.7,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.8,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.8,y=0.58)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.8,y=0.9)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.8,y=0.75)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.8,y=0.65)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.8,y=0.63)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25",x=0.8,y=0.63)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25\n 1.25\u2264 S < 2\n 2\u2264 S < 5\n S \u2265 5",x=0.8,y=0.63)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25\n 1.25\u2264 S < 2\n 2\u2264 S < 5\n S \u2265 5",x=0.8,y=0.5)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25\n 1.25\u2264 S < 2\n 2\u2264 S < 5\n S \u2265 5",x=0.8,y=0.5)
test<-ggdraw(test) + draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25\n 1.25\u2264 S < 2\n 2\u2264 S < 5\n S \u2265 5",x=0.8,y=0.5)
##+ draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
# figure 2 left ----
# use mu / sigma
# https://en.wikipedia.org/wiki/Coefficient_of_variation
sr <- vroom(here('data', 'output', "selection_ratio_county_2012-2019_wilson.csv")) %>%
mutate(selection_ratio = ifelse(is.infinite(selection_ratio), NA, selection_ratio))
renv::restore()
library(dplyr)
library(purrr)
library(Cairo)
library(vroom)
library(here)
library(tigris)
library(ggplot2)
library(glue)
library(broom)
library(maps)
library(ggridges)
library(cowplot)
sr <- vroom(here('scripts', 'R', "selection_ratio_county_2017-2019_grouped_wilson_poverty.csv"))
sc <- fips_codes %>%
mutate(FIPS = glue('{state_code}{county_code}'))
# figure 1 ----
# bins: based on actual value / based on lower bound
# transparency: ~ confidence
# sr_x_county <- sr %>%
#     filter(year >= 2017) %>%
#     group_by(FIPS) %>%
#
#     rename(sr = selection_ratio)
# sr_x_county <- sr %>%
#     filter(year >= 2017) %>%
#     group_by(FIPS) %>%
#     summarise(
#         black_users = sum(black_users),
#         white_users = sum(white_users),
#         black_incidents = sum(black_incidents),
#         white_incidents = sum(white_incidents),
#         incidents = sum(incidents),
#         users = sum(black_users + white_users)
#     ) %>%
#     mutate(sr = black_incidents / white_incidents * white_users / black_users,
#            diff = black_incidents / black_users - white_incidents / white_users)
sr_x_county <- sr %>%
rename(sr = selection_ratio)
data('county.fips')
us_county <- map_data("county") %>%
mutate(polyname = glue('{region},{subregion}')) %>%
inner_join(county.fips, by = 'polyname')
sr_x_county <- us_county %>%
left_join(sr_x_county %>%
mutate(FIPS = as.numeric(FIPS)), by = c('fips' = 'FIPS')) %>%
mutate(sr = ifelse(is.infinite(sr), NA, sr))
fct_order <- c('S<0.8', '0.8\u2264 S < 1.25',
'1.25\u2264 S < 2',
'2\u2264 S < 5',
'S \u2265 5')
cols <- c( 'S \u2265 5' = "red", '2\u2264 S < 5' = "purple",
'1.25\u2264 S < 2' = "yellow",'0.8\u2264 S < 1.25'= "blue",
'S<0.8' = "green")
assign_quartile <- function(x, quartiles){
x <- case_when(
x > quartiles[3] ~ 4,
x > quartiles[2] ~ 3,
x > quartiles[1] ~ 2,
x <= quartiles[1] ~ 1
)
x / 4
}
quartiles <- sr %>% summarise(quant = quantile(selection_ratio/ci,
probs = c(0.25, 0.5, 0.75))) %>%
pull(quant)
sr_x_county %>%
mutate(quartile = assign_quartile(sr/ci, quartiles)) %>%
mutate(sr = sr - ci) %>%
mutate(sr_binned = case_when(
sr < 0.8 ~ 'S<0.8',
sr >= 0.8 & sr < 1.25 ~ '0.8\u2264 S < 1.25',
sr >= 1.25 & sr < 2 ~ '1.25\u2264 S < 2',
sr >= 2 & sr < 5 ~'2\u2264 S < 5',
sr > 5 ~ 'S \u2265 5'
)) %>%
ggplot(data = .,
mapping = aes(x = long, y = lat,
group = group,
fill = factor(sr_binned, levels = fct_order),
alpha = quartile)) +
geom_polygon(color = "white", size = 0.2) +
# add state lines?
scale_fill_manual('Selection ratio S', values = cols, na.value = 'gray90') +
theme_classic() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_alpha(guide = 'none')
sr_x_county <- sr %>%
rename(sr = selection_ratio) %>%
mutate(sr = sr - ci)
data('county.fips')
us_county <- map_data("county") %>%
mutate(polyname = glue('{region},{subregion}')) %>%
inner_join(county.fips, by = 'polyname')
sr_x_county <- us_county %>%
left_join(sr_x_county %>%
mutate(FIPS = as.numeric(FIPS)), by = c('fips' = 'FIPS')) %>%
mutate(sr = ifelse(is.infinite(sr), NA, sr))
fct_order <- c('S<0.8', '0.8\u2264 S < 1.25',
'1.25\u2264 S < 2',
'2\u2264 S < 5',
'S \u2265 5')
cols <- c( 'S \u2265 5' = "red", '2\u2264 S < 5' = "purple",
'1.25\u2264 S < 2' = "yellow",'0.8\u2264 S < 1.25'= "blue",
'S<0.8' = "green")
assign_quartile <- function(x, quartiles){
x <- case_when(
x > quartiles[3] ~ 4,
x > quartiles[2] ~ 3,
x > quartiles[1] ~ 2,
x <= quartiles[1] ~ 1
)
x / 4
}
quartiles <- sr %>% summarise(quant = quantile(selection_ratio/ci,
probs = c(0.25, 0.5, 0.75))) %>%
pull(quant)
sr_x_county %>%
mutate(quartile = assign_quartile(sr/ci, quartiles)) %>%
mutate(sr_binned = case_when(
sr < 0.8 ~ 'S<0.8',
sr >= 0.8 & sr < 1.25 ~ '0.8\u2264 S < 1.25',
sr >= 1.25 & sr < 2 ~ '1.25\u2264 S < 2',
sr >= 2 & sr < 5 ~'2\u2264 S < 5',
sr > 5 ~ 'S \u2265 5'
)) %>%
ggplot(data = .,
mapping = aes(x = long, y = lat,
group = group,
fill = factor(sr_binned, levels = fct_order),
alpha = quartile)) +
geom_polygon(color = "white", size = 0.2) +
# add state lines?
scale_fill_manual('Selection ratio S', values = cols, na.value = 'gray90') +
theme_classic() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_alpha(guide = 'none')
sr_x_county %>%
mutate(quartile = assign_quartile(sr/ci, quartiles)) %>%
mutate(sr_binned = case_when(
sr < 0.8 ~ 'S<0.8',
sr >= 0.8 & sr < 1.25 ~ '0.8\u2264 S < 1.25',
sr >= 1.25 & sr < 2 ~ '1.25\u2264 S < 2',
sr >= 2 & sr < 5 ~'2\u2264 S < 5',
sr > 5 ~ 'S \u2265 5'
)) %>%
ggplot(data = .,
mapping = aes(x = long, y = lat,
group = group,
fill = factor(sr_binned, levels = fct_order),
alpha = quartile)) +
geom_polygon(color = "white", size = 0.2) +
# add state lines?
scale_fill_manual('Lower bound for selection ratio S', values = cols, na.value = 'gray90') +
theme_classic() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_alpha(guide = 'none')
sr_x_county %>%
mutate(quartile = assign_quartile(sr/ci, quartiles)) %>%
mutate(sr_binned = case_when(
sr < 0.8 ~ 'S<0.8',
sr >= 0.8 & sr < 1.25 ~ '0.8\u2264 S < 1.25',
sr >= 1.25 & sr < 2 ~ '1.25\u2264 S < 2',
sr >= 2 & sr < 5 ~'2\u2264 S < 5',
sr > 5 ~ 'S \u2265 5'
)) %>%
ggplot(data = .,
mapping = aes(x = long, y = lat,
group = group,
fill = factor(sr_binned, levels = fct_order),
alpha = quartile)) +
geom_polygon(color = "white", size = 0.2) +
# add state lines?
scale_fill_manual('Lower bound for \nselection ratio S', values = cols, na.value = 'gray90') +
theme_classic() +
theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank()) +
scale_alpha(guide = 'none')
bvColors=c(
"#FA2F03","#CB5C45","#A35C4D","#6A4942","#6A4942",
"#FA2F03E6","#CB5C45E6","#A35C4DE6","#6A4942E6","#6A4942E6",
"#FF2F0380","#CB5C4580","#A35C4D80","#6A494280","#6A494280")
legendGoal=melt(matrix(1:15,nrow=5, byrow = TRUE))
test <-ggplot(legendGoal, aes(Var2,Var1,fill = as.factor(value)))+ geom_tile()
test <- test + scale_fill_manual(values=bvColors,drop=FALSE)
test <-test+guides(fill = guide_legend('', ncol = 3, byrow = TRUE))
test <-test + theme(legend.text=element_blank())
test<-ggdraw(test) + draw_text(text = "S > 0.8 \n 0.8\u2264 S < 1.25\n 1.25\u2264 S < 2\n 2\u2264 S < 5\n S \u2265 5",x=0.8,y=0.5)
##+ draw_text(text = "More Var 1 -->",x=0.84,y=0.5,angle=270)
test
